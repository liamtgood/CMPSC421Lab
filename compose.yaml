# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    build:
      context: .
    environment:
      NODE_ENV: production
    ports:
      - 4000:3000
    image: cmpsc421lab-server:latest

  mongodb:
    image: cmpsc421lab-server:latest
    restart: always
    volumes:
    - mongodata:/data/db
    ports:
      - 27017:27017
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - node-network
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: examplepassword

  app:
    image: liamtgood/cmpsc421lab-server:latest
    depends_on:
      - mongodb
    ports:
     - 8080:3000
    networks:
      - node-network
    environment:
      DATABASE_URL: mongodb://host.docker.internal:27017/mydatabase


volumes:
  mongodata:
    driver: local
networks:
  node-network:
    driver: bridge


#    user: postgres
#    secrets:
#      - db-password
#    volumes:
#      - db-data:/var/lib/postgresql/data
#    environment:
#      - MONGO_INITDB_ROOT_USERNAME = 
#      - POSTGRES_DB=example
#      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#    expose:
#      - 5432
#    healthcheck:
#      test: [ "CMD", "pg_isready" ]
#      interval: 10s
#      timeout: 5s
#     retries: 5
#volumes:
#  db-data:
#secrets:
#  db-password:
#    file: db/password.txt

